{"version":3,"sources":["index.js"],"names":["CountdownTimer","constructor","targetDate","selector","start","document","querySelector","insertAdjacentHTML","createTimerTemplateEls","days","pad","hours","mins","secs","setInterval","time","Date","getTime","now","updateTimerElements","getTimeElements","Math","floor","value","String","padStart","textContent","timer"],"mappings":";;;AAgEA,aAhEA,QAAA,oBAEA,MAAMA,EACFC,aAAY,WAACC,EAAD,SAAaC,IAChBD,KAAAA,WAAaA,EACbC,KAAAA,SAAWA,EACXC,KAAAA,QAGTA,QAEIC,SAASC,cAAc,KAAKH,UACvBI,mBAAmB,YAAa,KAAKC,uBAAuB,CAAEC,KAAM,KAAKC,IAAI,GAAIC,MAAO,KAAKD,IAAI,GAAIE,KAAM,KAAKF,IAAI,GAAIG,KAAM,KAAKH,IAAI,MAExII,YAAY,KACNC,MAAAA,EAAO,IAAIC,KAAK,KAAKd,YAAYe,UAAYD,KAAKE,MACnDC,KAAAA,oBAAoB,KAAKC,gBAAgBL,KAC/C,KAGPK,gBAAiBL,GAMN,MAAA,CAAEN,KALI,KAAKC,IAAIW,KAAKC,MAAMP,EAAQ,QAK1BJ,MAJD,KAAKD,IAAIW,KAAKC,MAAOP,EAAQ,MAAyB,OAI9CH,KAHT,KAAKF,IAAIW,KAAKC,MAAOP,EAAQ,KAAoB,MAGlCF,KAFf,KAAKH,IAAIW,KAAKC,MAAOP,EAAQ,IAAc,OAK5DL,IAAIa,GACOC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGrCjB,wBAAwB,KAAEC,EAAF,MAAQE,EAAR,KAAeC,EAAf,KAAqBC,IACjC,gFACoCJ,2KAKGE,kLAKDC,oLAKAC,iFAKlDM,qBAAqB,KAAEV,EAAF,MAAQE,EAAR,KAAeC,EAAf,KAAqBC,IACtCR,SAASC,cAAc,uBAAuBoB,eAAiBjB,IAC/DJ,SAASC,cAAc,wBAAwBoB,eAAiBf,IAChEN,SAASC,cAAc,uBAAuBoB,eAAiBd,IAC/DP,SAASC,cAAc,uBAAuBoB,eAAiBb,KAKvE,MAAMc,EAAQ,IAAI3B,EAAe,CAC7BE,WAAY,IAAIc,KAAK,cACrBb,SAAU","file":"src.cf341596.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n\nclass CountdownTimer {\n    constructor({targetDate, selector}){\n        this.targetDate = targetDate;\n        this.selector = selector;\n        this.start();\n    }\n\n    start() {\n\n        document.querySelector(this.selector)\n            .insertAdjacentHTML('beforeend', this.createTimerTemplateEls({ days: this.pad(0), hours: this.pad(0), mins: this.pad(0), secs: this.pad(0) }));\n        \n            setInterval(() => {\n            const time = new Date(this.targetDate).getTime() - Date.now();\n            this.updateTimerElements(this.getTimeElements(time));\n        }, 1000);\n    };\n\n    getTimeElements (time) {\n        const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n        const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n        const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n        const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n    \n        return { days, hours, mins, secs };\n    };\n\n    pad(value) {\n        return String(value).padStart(2, '0');\n    };\n\n    createTimerTemplateEls ({ days, hours, mins, secs }) {\n        return `<div class=\"field\">\n            <span class=\"value\" data-value=\"days\">${days}</span>\n            <span class=\"label\">Days</span>\n            </div>\n    \n             <div class=\"field\">\n              <span class=\"value\" data-value=\"hours\">${hours}</span>\n              <span class=\"label\">Hours</span>\n            </div>\n          \n            <div class=\"field\">\n              <span class=\"value\" data-value=\"mins\">${mins}</span>\n              <span class=\"label\">Minutes</span>\n            </div>\n          \n            <div class=\"field\">\n              <span class=\"value\" data-value=\"secs\">${secs}</span>\n              <span class=\"label\">Seconds</span>\n            </div>`;\n    };\n\n    updateTimerElements ({ days, hours, mins, secs }) {\n        document.querySelector('[data-value=\"days\"]').textContent = `${days}`;\n        document.querySelector('[data-value=\"hours\"]').textContent = `${hours}`; \n        document.querySelector('[data-value=\"mins\"]').textContent = `${mins}`;\n        document.querySelector('[data-value=\"secs\"]').textContent = `${secs}`;\n    };\n\n};\n\nconst timer = new CountdownTimer({\n    targetDate: new Date('Dec 7 2021'),\n    selector: '#timer-1',\n});\n\n\n\n\n\n"]}